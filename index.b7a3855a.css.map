{"mappings":"AAOA,gBAME,kBAAmB,CAFnB,YAAa,CACb,6BAA8B,CAF9B,YAAa,CADb,cAAe,CADf,KAMF,CAEA,mBAIE,iBAAoB,CACpB,cAAiB,CAJjB,YAAa,CACb,mCAAqC,CACrC,gCAAkC,CAIlC,0BAA2B,CAD3B,cAEF,CAEA,mBAEE,iBAAkB,CADlB,YAEF,CAEA,gBACE,iBACF,CAEA,qBACE,iBACF,CAEA,8BACE,iBACF,CClCA,2BACE,UACF,CAEA,kBAIE,kBAAmB,CAHnB,wBAAyB,CAOzB,kBAAmB,CADnB,yDAAiE,CALjE,YAAa,CAGb,WAAY,CAFZ,4BAA6B,CAM7B,aAAc,CAHd,cAIF,CAEA,oBACE,aACF,CACA,0BAIE,wBAAyB,CAFzB,iBAAkB,CAClB,kEAA8E,CAE9E,wBAAyB,CAJzB,UAKF,CAEA,iBAEE,aAAc,CACd,aAAc,CACd,eAAiB,CAHjB,iBAAkB,CAIlB,8BAAgC,CAChC,gBACF,CACA,uBACE,eAAgB,CAChB,cACF,CACA,uBASE,wBAAyB,CANzB,WAAY,CAOZ,2BAA4B,CAT5B,UAAW,CAKX,aAAc,CAEd,YAAc,CAJd,MAAO,CAFP,iBAAkB,CASlB,8BAAgC,CAJhC,UAAW,CAFX,SAOF,CCnDA,cAEE,eAAgB,CADhB,eAEF,CCHA,kBASE,uBAA2B,CAD3B,qBAAsB,CAJtB,kBAAmB,CADnB,yDAAiE,CAFjE,YAAa,CACb,MAAO,CAKP,WAAY,CADZ,eAAgB,CADhB,gBAKF,CCVA,mBAEE,wBAAyB,CACzB,kBAAmB,CAGnB,eAAgB,CAChB,WAAY,CAFZ,WAAY,CADZ,cAAe,CAHf,iBAOF,CAEA,eAME,UAAW,CAJX,YAAa,CAEb,cAAe,CACf,eAAiB,CAFjB,sBAAuB,CAFvB,eAMF,CACA,sBAEE,6DAAgE,CAChE,qBAAsB,CAFtB,UAAW,CAIX,WAAY,CACZ,uBAAwB,CAFxB,UAGF,CAEA,iBAGE,gBAAiB,CACjB,aAGF,CClCA,wCDiCE,kBAAmB,CAJnB,YAAa,CADb,UAAW,CAIX,sBCrBF,CAXA,uBAUE,qBAAuB,CAJvB,kBAAmB,CADnB,yDAAiE,CAGjE,cAAe,CACf,eAAiB,CAFjB,WAIF,CCXA,0BACE,eAAmB,CACnB,WAAY,CAMZ,kBAAmB,CADnB,oCAA2C,CAE3C,sBAAyB,CACzB,cAAe,CANf,YAAa,CADb,YAAa,CAQb,iBAAkB,CALlB,yBAA0B,CAD1B,WAOF,CAEA,cAEE,SAAU,CADV,iBAEF,CCjBA,QAEI,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OCuKJ,CC9KA,MAEE,4CAAA,CACA,YAAA,CAFA,YAAA,CAGA,WDiLF,CElEI,yBACE,MD7GF,4CDmLF,CACF,CChLA,KAUE,kEAAA,CACA,uBAAA,CAEA,2BAAA,CADA,qBAAA,CAPA,iCAAA,CAGA,WAAA,CAFA,QAAA,CAGA,gBAAA,CAFA,SDgMF,CCtLE,4BAfE,sBAAA,CAAA,8BAAA,CAAA,0BAAA,CAAA,0BAAA,CAAA,0BAAA,CAAA,0BAAA,CAAA,wBAAA,CAAA,wBAAA,CAAA,wBAAA,CAAA,wBAAA,CAAA,wBDmNJ,CCpME,sBAEI,2BAAA,CAAA,yBDuMN","sources":["src/components/GameContainer/style.module.scss","src/components/MainMenu/style.module.scss","src/components/Logo/style.module.scss","src/components/Portrait/style.module.scss","src/components/ModeRules/style.module.scss","src/components/GameModeName/style.module.scss","src/components/HallOfFameButton/style.module.scss","src/theme/constants/breakpoints.module.scss","%3Cinput%20css%208Sxfj3%3E","src/theme/style.scss","src/theme/mixins/_screen.scss"],"sourcesContent":[":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n#TopBar {\n  top: 0;\n  max-width: 100%;\n  height: 20rem;\n  display: grid;\n  grid-template-columns: 2fr 4fr;\n  align-items: center;\n}\n\n#MiddleBar {\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-template-rows: repeat(5, 1fr);\n  grid-column-gap: 0px;\n  grid-row-gap: 0px;\n  max-width: 100%;\n  height: calc(100vh - 20rem);\n}\n\nportrait-component {\n  padding: 20px;\n  grid-area: 1/1/5/3;\n}\n\ngame-mode-title {\n  grid-area: 1/3/2/7;\n}\n\nmode-rules-component {\n  grid-area: 2/3/4/7;\n}\n\nhall-of-fame-button-component {\n  grid-area: 4/3/6/7;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n#mainMenuComponent {\n  width: 100%;\n}\n\n#mainMenu {\n  background-color: #fefefe;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 8rem;\n  max-width: 100%;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  margin: 0 20px;\n}\n\ndiv .active {\n  color: #202020;\n}\ndiv .active::after {\n  content: \"\";\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 4px 4px 40px rgba(255, 0, 0, 0.9);\n  background-color: #df4b4b;\n  clip-path: inset(0 0 0 0);\n}\n\n.options {\n  position: relative;\n  color: #979797;\n  font-size: 2em;\n  font-weight: bold;\n  transition: all 0.3s ease-in-out;\n  user-select: none;\n}\n.options:hover {\n  color: #ff0000e5;\n  cursor: pointer;\n}\n.options::after {\n  content: \"\";\n  position: absolute;\n  bottom: -8px;\n  left: 0;\n  z-index: 2;\n  display: block;\n  width: 100%;\n  height: 0.5rem;\n  background-color: #fe6666;\n  clip-path: inset(0 100% 0 0);\n  transition: all 0.5s ease-in-out;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n.logo {\n  max-width: 400px;\n  max-height: 100%;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n.portrait {\n  display: flex;\n  flex: 1;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  min-height: 100px;\n  max-width: 600px;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n#container {\n  position: relative;\n  background-color: #fefefe;\n  border-radius: 16px;\n  max-width: 100%;\n  margin: 2rem;\n  font-weight: 500;\n  height: 100%;\n}\n\n#title {\n  margin-top: 2rem;\n  display: flex;\n  justify-content: center;\n  font-size: 3rem;\n  font-weight: bold;\n  color: #000;\n}\n#title::before {\n  content: \"\";\n  background-image: url(\"../../../static/assets/ui/ModeRules.png\");\n  background-size: cover;\n  width: 2rem;\n  height: 2rem;\n  margin: auto 15px auto 0;\n}\n\n#content {\n  height: 80%;\n  display: flex;\n  font-size: 1.5rem;\n  margin: 0 2rem;\n  justify-content: center;\n  align-items: center;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n.gameModeTitle {\n  display: flex;\n  height: 80%;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  margin: 2rem;\n  font-size: 2rem;\n  font-weight: bold;\n  background-color: white;\n}",":export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n.hallOfFamebutton {\n  background: #ffffff;\n  border: none;\n  padding: 40px;\n  height: 100px;\n  width: 575px;\n  text-transform: capitalize;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 16px;\n  font-family: \"Montserrat\";\n  font-size: 42px;\n  text-align: center;\n}\n\n.icon {\n  position: absolute;\n  left: 10px;\n}","$breakpoints: (\n  xs: 600,\n  sm: 960,\n  md: 1279,\n  lg: 1600,\n) !default;\n\n:export {\n  @each $key, $value in $breakpoints {\n    #{unquote($key)}: $value;\n  }\n}\n ","#_TopBar_476585 {\n  top: 0;\n  max-width: 100%;\n  height: 20rem;\n  display: grid;\n  grid-template-columns: 2fr 4fr;\n  align-items: center;\n}\n\n#_MiddleBar_476585 {\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-template-rows: repeat(5, 1fr);\n  grid-column-gap: 0px;\n  grid-row-gap: 0px;\n  max-width: 100%;\n  height: calc(100vh - 20rem);\n}\n\nportrait-component {\n  padding: 20px;\n  grid-area: 1/1/5/3;\n}\n\ngame-mode-title {\n  grid-area: 1/3/2/7;\n}\n\nmode-rules-component {\n  grid-area: 2/3/4/7;\n}\n\nhall-of-fame-button-component {\n  grid-area: 4/3/6/7;\n}\n#_mainMenuComponent_736bf9 {\n  width: 100%;\n}\n\n#_mainMenu_736bf9 {\n  background-color: #fefefe;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 8rem;\n  max-width: 100%;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  margin: 0 20px;\n}\n\ndiv ._active_736bf9 {\n  color: #202020;\n}\n\ndiv ._active_736bf9::after {\n  content: \"\";\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 4px 4px 40px rgba(255, 0, 0, 0.9);\n  background-color: #df4b4b;\n  clip-path: inset(0 0 0 0);\n}\n\n._options_736bf9 {\n  position: relative;\n  color: #979797;\n  font-size: 2em;\n  font-weight: bold;\n  transition: all 0.3s ease-in-out;\n  user-select: none;\n}\n\n._options_736bf9:hover {\n  color: #ff0000e5;\n  cursor: pointer;\n}\n\n._options_736bf9::after {\n  content: \"\";\n  position: absolute;\n  bottom: -8px;\n  left: 0;\n  z-index: 2;\n  display: block;\n  width: 100%;\n  height: 0.5rem;\n  background-color: #fe6666;\n  clip-path: inset(0 100% 0 0);\n  transition: all 0.5s ease-in-out;\n}\n._logo_d57d49 {\n  max-width: 400px;\n  max-height: 100%;\n}\n._portrait_89d41b {\n  display: flex;\n  flex: 1;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  min-height: 100px;\n  max-width: 600px;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n}\n#_container_7470d0 {\n  position: relative;\n  background-color: #fefefe;\n  border-radius: 16px;\n  max-width: 100%;\n  margin: 2rem;\n  font-weight: 500;\n  height: 100%;\n}\n\n#_title_7470d0 {\n  margin-top: 2rem;\n  display: flex;\n  justify-content: center;\n  font-size: 3rem;\n  font-weight: bold;\n  color: #000;\n}\n\n#_title_7470d0::before {\n  content: \"\";\n  background-image: url(\"ModeRules.54841f5b.png\");\n  background-size: cover;\n  width: 2rem;\n  height: 2rem;\n  margin: auto 15px auto 0;\n}\n\n#_content_7470d0 {\n  height: 80%;\n  display: flex;\n  font-size: 1.5rem;\n  margin: 0 2rem;\n  justify-content: center;\n  align-items: center;\n}\n._gameModeTitle_517444 {\n  display: flex;\n  height: 80%;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 4px 4px 40px 0px #ff0000e5, 0px 4px 4px 0px #00000040;\n  border-radius: 16px;\n  margin: 2rem;\n  font-size: 2rem;\n  font-weight: bold;\n  background-color: white;\n}\n._hallOfFamebutton_e60c1a {\n  background: #ffffff;\n  border: none;\n  padding: 40px;\n  height: 100px;\n  width: 575px;\n  text-transform: capitalize;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 16px;\n  font-family: \"Montserrat\";\n  font-size: 42px;\n  text-align: center;\n}\n\n._icon_e60c1a {\n  position: absolute;\n  left: 10px;\n}\n:export {\n  xs: 600;\n  sm: 960;\n  md: 1279;\n  lg: 1600;\n}\n\n.test {\n  padding: 16px;\n  background-color: rgba(var(--color-red600), 1);\n  height: 400px;\n  width: 400px;\n}\n\n@media (min-width: 960px) {\n  .test {\n    background-color: rgba(var(--color-red200), 1);\n  }\n}\n\nbody {\n  --color-primary: 2, 0, 30;\n  --color-background: 196, 196, 196;\n  --color-red100: 254, 226, 226;\n  --color-red200: 254, 202, 202;\n  --color-red300: 252, 165, 165;\n  --color-red400: 248, 113, 113;\n  --color-red500: 239, 68, 68;\n  --color-red600: 220, 38, 38;\n  --color-red700: 185, 28, 28;\n  --color-red800: 153, 27, 27;\n  --color-red900: 127, 29, 29;\n  font-family: Montserrat, sans-serif;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  min-height: 100vh;\n  background-image: url(\"QuizBackground.5a20511a.png\");\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\nbody[data-theme=light] {\n  --color-primary: 2, 0, 30;\n  --color-background: 196, 196, 196;\n  --color-red100: 254, 226, 226;\n  --color-red200: 254, 202, 202;\n  --color-red300: 252, 165, 165;\n  --color-red400: 248, 113, 113;\n  --color-red500: 239, 68, 68;\n  --color-red600: 220, 38, 38;\n  --color-red700: 185, 28, 28;\n  --color-red800: 153, 27, 27;\n  --color-red900: 127, 29, 29;\n}\n\nbody[data-theme=dark] {\n  --color-primary: 255, 255, 255;\n  --color-background: 6, 0, 30;\n}\n/*# sourceMappingURL=index.b7a3855a.css.map */\n","@use './theme' as *;\n\n.test {\n  padding: spacing(4);\n  background-color: color(red600);\n  height: 400px;\n  width: 400px;\n\n  @include screen(sm) {\n    background-color: color(red200);\n  }\n}\n\nbody {\n  @each $key, $value in $light-theme {\n    --color-#{$key}: #{derive-rgb-values-from-hex($value)};\n  }\n\n  font-family: Montserrat, sans-serif;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  min-height: 100vh;\n  background-image: url(\"../../static/assets/ui/QuizBackground.png\");\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n@each $theme-name, $theme in $themes {\n  body[data-theme='#{$theme-name}'] {\n    @each $key, $value in $theme {\n      --color-#{$key}: #{derive-rgb-values-from-hex($value)};\n    }\n  }\n}\n","@use '../constants' as *;\n\n$static-breakpoint: desktop !default;\n\n$responsive: desktop !default;\n\n/// Show breakpoints in the top right corner\n$show-breakpoints: () !default;\n\n$media-type: all !default;\n\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map-has-key($breakpoints, $name) {\n    @return map-get($breakpoints, $name) * 1px;\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n  }\n}\n\n/// @example scss\n///  .element {\n///    @include screen($from: mobile) {\n///      color: red;\n///    }\n///    @include screen($to: tablet) {\n///      color: blue;\n///    }\n///    @include screen(mobile, tablet) {\n///      color: green;\n///    }\n///    @include screen($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include screen(950px) {\n///      color: hotpink;\n///    }\n///    @include screen(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include screen(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin screen(\n  $from: false,\n  $to: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints,\n  $responsive: $responsive,\n  $static-breakpoint: $static-breakpoint\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: $from * 1px;\n    } @else {\n      $min-width: get-breakpoint-width($from, $breakpoints);\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $to {\n    @if type-of($to) == number {\n      $max-width: $to * 1px;\n    } @else {\n      $max-width: get-breakpoint-width($to, $breakpoints) - 1;\n    }\n  }\n\n  // Responsive support is disabled, rasterize the output outside @media blocks\n  // The browser will rely on the cascade itself.\n  @if $responsive == false {\n    $static-breakpoint-width: get-breakpoint-width(\n      $static-breakpoint,\n      $breakpoints\n    );\n    $target-width: $static-breakpoint-width;\n\n    // Output only rules that start at or span our target width\n    @if (\n      $and ==\n        false and\n        $min-width <=\n        $target-width and\n        ($to == false or $max-width >= $target-width) and\n        $media-type !=\n        'print'\n    ) {\n      @content;\n    }\n  }\n\n  // Responsive support is enabled, output rules inside @media queries\n  @else {\n    @if $min-width != 0 {\n      $media-query: '#{$media-query} and (min-width: #{$min-width})';\n    }\n    @if $max-width != 0 {\n      $media-query: '#{$media-query} and (max-width: #{$max-width})';\n    }\n    @if $and {\n      $media-query: '#{$media-query} and #{$and}';\n    }\n\n    // Remove unnecessary media query prefix 'all and '\n    @if ($media-type == 'all' and $media-query != '') {\n      $media-type: '';\n      $media-query: str-slice(unquote($media-query), 6);\n    }\n\n    @media #{$media-type + $media-query} {\n      & {\n        @content;\n      }\n    }\n  }\n}\n\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: nth($list, ceil(length($list) / 2));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: append($less, $item);\n      } @else if ($item > $seed) {\n        $large: append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map-keys($map);\n  $map-values: map-values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: nth($map-keys, $index);\n    $map-sorted: map-merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map-merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n) {\n  background-color: #fcf8e3;\n  border-bottom: 1px solid #fbeed5;\n  border-left: 1px solid #fbeed5;\n  color: #c09853;\n  font: small-caption;\n  padding: 3px 6px;\n  pointer-events: none;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 100;\n\n  // Loop through the breakpoints that should be shown\n  @each $show-breakpoint in $show-breakpoints {\n    $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n\n    @include screen($show-breakpoint, $breakpoints: $breakpoints) {\n      content: '#{$show-breakpoint} ≥ #{$width} (#{$width})';\n    }\n  }\n}\n\n@if length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n"],"names":[],"version":3,"file":"index.b7a3855a.css.map"}